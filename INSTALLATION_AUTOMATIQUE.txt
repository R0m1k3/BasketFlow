╔═══════════════════════════════════════════════════════════════╗
║                                                               ║
║   🚀 BASKET FLOW - INSTALLATION 100% AUTOMATIQUE              ║
║                                                               ║
╚═══════════════════════════════════════════════════════════════╝


📋 FICHIERS À TRANSFÉRER SUR VOTRE SERVEUR
═══════════════════════════════════════════════════════════════

À la racine :
  ✓ docker-compose.yml
  ✓ init.sql (optionnel, utilisé uniquement pour référence)

Backend :
  ✓ backend/Dockerfile
  ✓ backend/package.json
  ✓ backend/src/autoInit.js          ← NOUVEAU : init automatique
  ✓ Tous les autres fichiers backend

Frontend :
  ✓ Tous les fichiers frontend modifiés


🚀 INSTALLATION EN 3 COMMANDES
═══════════════════════════════════════════════════════════════

Sur votre serveur privé, exécutez uniquement :

1️⃣ Aller dans le dossier
   cd /chemin/vers/basket-flow

2️⃣ Créer le réseau (si première installation)
   docker network create nginx_default

3️⃣ Démarrer tout
   docker-compose up -d


C'EST TOUT ! ✅


⏱️  TEMPS D'ATTENTE
═══════════════════════════════════════════════════════════════

Attendez environ 30-40 secondes que tout démarre.


✅ CE QUI SE PASSE AUTOMATIQUEMENT
═══════════════════════════════════════════════════════════════

1. PostgreSQL démarre (15-20 secondes)
   → init.sql s'exécute si volume vide
   
2. Backend démarre (après 10 secondes)
   → autoInit.js vérifie les tables
   → Crée les tables si manquantes
   → Crée l'admin si manquant
   → Démarre le serveur
   
3. Frontend démarre
   → Compile et démarre


🔐 TESTER LE LOGIN
═══════════════════════════════════════════════════════════════

Ouvrez dans votre navigateur :

http://localhost:4000/login

Identifiant : admin
Mot de passe : admin

✅ Ça devrait fonctionner immédiatement !


🔍 VÉRIFIER QUE TOUT FONCTIONNE
═══════════════════════════════════════════════════════════════

docker-compose ps

Vous devez voir 3 conteneurs "running" :
  - basket_postgres
  - basket_backend
  - basket_frontend


📊 VOIR LES LOGS (optionnel)
═══════════════════════════════════════════════════════════════

# Tous les logs
docker-compose logs

# Backend uniquement
docker-compose logs backend

# Logs en temps réel
docker-compose logs -f backend


🔄 RÉINSTALLATION COMPLÈTE (si nécessaire)
═══════════════════════════════════════════════════════════════

Si vous voulez tout réinitialiser :

docker-compose down -v
docker volume rm basket_postgres_data
docker-compose up -d


⚙️ COMMENT ÇA MARCHE
═══════════════════════════════════════════════════════════════

Le fichier backend/src/autoInit.js :
  ✓ S'exécute automatiquement avant le démarrage du serveur
  ✓ Vérifie si la table User existe
  ✓ Si non : crée TOUTES les tables
  ✓ Vérifie si l'admin existe
  ✓ Si non : crée l'admin (admin/admin)
  ✓ Affiche le résultat dans les logs
  ✓ Lance le serveur

Vous n'avez RIEN à faire manuellement !


✅ AVANTAGES
═══════════════════════════════════════════════════════════════

✓ Zero configuration manuelle
✓ Fonctionne même si le volume PostgreSQL existe déjà
✓ Idempotent : peut être relancé plusieurs fois
✓ Logs clairs pour voir ce qui se passe
✓ Admin créé automatiquement
✓ Tables créées automatiquement


📝 NOTES IMPORTANTES
═══════════════════════════════════════════════════════════════

• Le mot de passe de l'admin est "admin"
  → Changez-le après la première connexion !

• init.sql dans /docker-entrypoint-initdb.d/ ne s'exécute
  que si le volume est vide (première installation)
  
• autoInit.js s'exécute TOUJOURS et vérifie/crée ce qui
  manque, même si le volume existe déjà


═══════════════════════════════════════════════════════════════

🎉 VOTRE APPLICATION EST 100% AUTOMATIQUE !

Plus besoin de :
  ❌ Copier-coller des commandes SQL
  ❌ Exécuter des scripts d'initialisation
  ❌ Créer l'admin manuellement
  ❌ Vérifier si les tables existent

Juste : docker-compose up -d et c'est prêt ! ✅

═══════════════════════════════════════════════════════════════
