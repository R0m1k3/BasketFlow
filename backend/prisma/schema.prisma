generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model League {
  id          String   @id @default(uuid())
  name        String   @unique
  shortName   String
  country     String
  logo        String?
  color       String?
  isActive    Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  matches     Match[]
}

model Team {
  id          String   @id @default(uuid())
  name        String
  shortName   String?
  logo        String?
  leagueId    String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  homeMatches Match[]  @relation("HomeTeam")
  awayMatches Match[]  @relation("AwayTeam")
}

model Broadcaster {
  id              String            @id @default(uuid())
  name            String            @unique
  logo            String?
  type            String
  isFree          Boolean           @default(false)
  createdAt       DateTime          @default(now())
  updatedAt       DateTime          @updatedAt
  matchBroadcasts MatchBroadcast[]
}

model Match {
  id              String            @id @default(uuid())
  leagueId        String
  homeTeamId      String
  awayTeamId      String
  dateTime        DateTime
  venue           String?
  status          String            @default("scheduled")
  homeScore       Int?
  awayScore       Int?
  externalId      String?           @unique
  createdAt       DateTime          @default(now())
  updatedAt       DateTime          @updatedAt
  league          League            @relation(fields: [leagueId], references: [id])
  homeTeam        Team              @relation("HomeTeam", fields: [homeTeamId], references: [id])
  awayTeam        Team              @relation("AwayTeam", fields: [awayTeamId], references: [id])
  broadcasts      MatchBroadcast[]

  @@index([dateTime])
  @@index([leagueId])
}

model MatchBroadcast {
  id            String      @id @default(uuid())
  matchId       String
  broadcasterId String
  streamUrl     String?
  notes         String?
  createdAt     DateTime    @default(now())
  match         Match       @relation(fields: [matchId], references: [id], onDelete: Cascade)
  broadcaster   Broadcaster @relation(fields: [broadcasterId], references: [id])

  @@unique([matchId, broadcasterId])
}

model User {
  id        String   @id @default(uuid())
  username  String   @unique
  email     String?
  password  String
  name      String
  role      String   @default("user")
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([username])
}

model Config {
  id          String   @id @default(uuid())
  key         String   @unique
  value       String
  description String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}
